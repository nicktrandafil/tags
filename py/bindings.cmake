# Shiboken The name of the generated bindings module (as imported in Python).
set(bindings_library "EverloadTags")

# The header file with all the types and functions for which bindings will be
# generated.
set(wrapped_header ${CMAKE_SOURCE_DIR}/py/bindings.h)

# The typesystem xml file which defines the relationships between the C++ types
# / functions and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_SOURCE_DIR}/py/bindings.xml)

# Specify which C++ files will be generated by shiboken. This includes the
# module wrapper and a '.cpp' file per C++ type. These are needed for generating
# the module shared library.

set(generated_path ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library})

set(generated_sources
    ${generated_path}/everload_tags_behaviorconfig_wrapper.cpp
    ${generated_path}/everload_tags_config_wrapper.cpp
    ${generated_path}/everloadtags_module_wrapper.cpp
    ${generated_path}/everload_tags_styleconfig_wrapper.cpp
    ${generated_path}/everload_tags_tagsedit_wrapper.cpp
    ${generated_path}/everload_tags_tagslineedit_wrapper.cpp
    ${generated_path}/everload_tags_wrapper.cpp)
# =================== Shiboken detection ======================
# Use provided python interpreter if given.
if(NOT python_interpreter)
    find_program(python_interpreter "python")
    if(NOT python_interpreter)
        message(FATAL_ERROR "Make sure python is in PATH.")
    endif()
endif()
message(STATUS "Using python interpreter: ${python_interpreter}")

# Macro to get various pyside / python include / link flags and paths. Uses the
# not entirely supported utils/pyside_config.py file.
macro(pyside_config option output_var)
    if(${ARGC} GREATER 2)
        set(is_list ${ARGV2})
    else()
        set(is_list "")
    endif()

    execute_process(
        COMMAND ${python_interpreter}
                "${CMAKE_SOURCE_DIR}/utils/pyside_config.py" ${option}
        OUTPUT_VARIABLE ${output_var}
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    if("${${output_var}}" STREQUAL "")
        message(
            FATAL_ERROR "Error: pyside_config.py ${option} returned no output.")
    endif()
    if(is_list)
        string(REPLACE " " ";" ${output_var} "${${output_var}}")
    endif()
endmacro()

# Query for the shiboken generator path, Python path, include paths and linker
# flags.
pyside_config(--shiboken-module-path shiboken_module_path)
pyside_config(--shiboken-generator-path shiboken_generator_path)
pyside_config(--pyside-path pyside_path)
pyside_config(--pyside-include-path pyside_include_dir 1)
pyside_config(--python-include-path python_include_dir)
pyside_config(--shiboken-generator-include-path shiboken_include_dir 1)
pyside_config(--shiboken-module-shared-libraries-cmake
              shiboken_shared_libraries 0)
pyside_config(--python-link-flags-cmake python_linking_data 0)
pyside_config(--pyside-shared-libraries-cmake pyside_shared_libraries 0)

set(shiboken_path
    "${shiboken_generator_path}/shiboken6${CMAKE_EXECUTABLE_SUFFIX}")
if(NOT EXISTS ${shiboken_path})
    message(
        FATAL_ERROR "Shiboken executable not found at path: ${shiboken_path}")
endif()

# Enable rpaths so that the built shared libraries find their dependencies.
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH ${shiboken_module_path} ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# Get the relevant Qt include dirs, to pass them on to shiboken.
get_property(
    QT_WIDGETS_INCLUDE_DIRS
    TARGET Qt6::Widgets
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(
    QT_GUI_INCLUDE_DIRS
    TARGET Qt6::Gui
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(
    QT_CORE_INCLUDE_DIRS
    TARGET Qt6::Core
    PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
set(INCLUDES "")
foreach(INCLUDE_DIR
        ${QT_WIDGETS_INCLUDE_DIRS} ${QT_GUI_INCLUDE_DIRS}
        ${QT_CORE_INCLUDE_DIRS} ${CMAKE_SOURCE_DIR}/include/everload_tags/)
    list(APPEND INCLUDES "-I${INCLUDE_DIR}")
endforeach()

# On macOS, check if Qt is a framework build. This affects how include paths
# should be handled.
get_target_property(QtCore_is_framework Qt6::Core FRAMEWORK)
if(QtCore_is_framework)
    get_target_property(qt_core_library_location Qt6::Core LOCATION)
    get_filename_component(qt_core_library_location_dir
                           "${qt_core_library_location}" DIRECTORY)
    get_filename_component(lib_dir "${qt_core_library_location_dir}/../"
                           ABSOLUTE)
    list(APPEND INCLUDES "--framework-include-paths=${lib_dir}")
endif()

# We need to include the headers for the module bindings that we use.
set(pyside_additional_includes "")
foreach(INCLUDE_DIR ${pyside_include_dir})
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtCore")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtGui")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtWidgets")
endforeach()
# ==== Shiboken target for generating binding C++ files  ====

# Set up the options to pass to shiboken.
set(shiboken_options
    --generator-set=shiboken
    --enable-parent-ctor-heuristic
    --enable-pyside-extensions
    --enable-return-value-heuristic
    --use-isnull-as-nb_nonzero
    --avoid-protected-hack
    ${INCLUDES}
    -I${CMAKE_SOURCE_DIR}
    -T${CMAKE_SOURCE_DIR}
    -T${pyside_path}/typesystems
    --output-directory=${CMAKE_CURRENT_BINARY_DIR})

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.
add_custom_command(
    OUTPUT ${generated_sources}
    COMMAND ${shiboken_path} ${shiboken_options} ${wrapped_header}
            ${typesystem_file}
    DEPENDS ${generated_sources_dependencies}
    # IMPLICIT_DEPENDS CXX ${wrapped_header}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Running generator for ${typesystem_file}.")

# ==== CMake target - bindings_library ====

# Set the cpp files which will be used for the bindings library.
set(${bindings_library}_sources ${generated_sources})

# Define and build the bindings library.
add_library(${bindings_library} SHARED ${${bindings_library}_sources})

# Apply relevant include and link flags.
target_include_directories(${bindings_library}
                           PRIVATE ${pyside_additional_includes})
target_include_directories(${bindings_library} PRIVATE ${pyside_include_dir})
target_include_directories(${bindings_library} PRIVATE ${python_include_dir})
target_include_directories(${bindings_library} PRIVATE ${shiboken_include_dir})
target_include_directories(${bindings_library}
                           PRIVATE ${CMAKE_SOURCE_DIR}/include/everload_tags/)

target_link_libraries(${bindings_library} PRIVATE Qt6::Widgets)
target_link_libraries(${bindings_library} PRIVATE ${PROJECT_NAME})
target_link_libraries(${bindings_library} PRIVATE ${pyside_shared_libraries})
target_link_libraries(${bindings_library} PRIVATE ${shiboken_shared_libraries})

# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(
    TARGET ${bindings_library}
    PROPERTY OUTPUT_NAME "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")
